#!/bin/bash
##
# @Description: Train and/or run conversational AI model.
# Ignores contradictory arguments.
# API

I='Intents'
R='Responses'


source .env
#trap '' HUP

printenv PORT # /usr/ucb
printenv ACTION

# args here are really just class properties
function show_usage (){
    printf "Usage: $0 [options [parameters]]\n"
    printf "\n"
    printf "Options:\n"
    printf " -t|--train [target], Train model (nlu, dialogue or both)\n"
    printf " -p|--predict [model], Run the specified model \n"
    printf " -d|--debug, Run in debug mode\n"
    printf " -m|--model, Name of model to run (aka domain)\n"
    printf " -e|--epochs, Unless you have infinite patience\n"
    printf " -a|--api, Enables web api\n"
    printf " -h|--help, Print help\n"
return 0
}
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]];then
    show_usage
fi

function var-is-set() {
    declare -p "$1" &>/dev/null
}

# This can be consolidated with the actual invocation.
function get_train_target (){
  case "$1" in
    nlu|intent|intents)
      shift
      CHOICE=1
      echo "Training nlu (intents)"
      ;;
    dialog|dialogue|response)
      shift
      CHOICE=2
      echo "Training dialogue (responses)"
      ;;
    both)
      shift
      CHOICE=3
      echo "Training nlu and dialog models (intents and responses)"
      ;;
    *)
      ask_train_target "$@"
  esac
  return 0
}

function ask_train_target (){
if [[ -z "${1}" ]]; then
  echo "Train Intent Recognition or Dialogue Response?
  1. train nlu (intents)
  2. train dialogue (responses)
  3. train both"
  read CHOICE
fi
}

function ask_run_app (){
  echo "Run app after training model? (y/n or press 'd' to run in debug mode)"
  read RUNYN
}

function check_valid_model (){

  if [[ $1 == $BOT_DOMAIN ]]; then
    return 0
  else
    echo "You sure about that?"
    return 0
  fi
}

# And we get our command args...
while [ ! -z "$1" ]; do
  case "$1" in
     --debug|-d)
      RUNYN=d
      ;;
     --train|-t)
      shift
      TRAIN=true
      get_train_target "$@"
      ;;
     --predict|-p)
      if [[ $RUNYN != d ]]; then
        RUNYN=y
      fi
      ;;
     --model|-m)
      # shift
      check_valid_model "$@"
      ;;
     --api|-a)
       shift
       API=y
       ;;
     *)
      show_usage
      ;;
  esac
shift
done

# @TODO - make this a select list, with option to create new project/model.
if [[ -z "${BOT_DOMAIN}" ]]; then
  #echo "length is ${#BOT_DOMAIN}"
  read -p "No active model set. Enter model to use or press 'Enter' for [default]: " PROJECT
  PROJECT=${PROJECT:-default}
else
  #read -p "Enter model to use or enter for [$BOT_DOMAIN]: " PROJECT
  echo "Active model is for the [$BOT_DOMAIN] domain. "
  PROJECT=${PROJECT:-$BOT_DOMAIN}
fi

# @Todo: rename CHOICE to TRAIN_TARGET
if [[ $TRAIN == true ]] && [[ -z "${CHOICE}" ]]; then
  ask_train_target
fi

# @TODO: Either change RUNYN to RUN or change TRAIN to TRAIN_Y_N - Semantics FTMFW
# if [[ -z "${RUNYN}" ]]; then
#  ask_run_app
# fi

# Check if previous domain.yml exists and vanquish.
#mv domain.yml .domain.yml.prev
rm domain.yml
ln -s domain/$PROJECT/domain.yml domain.yml

# Active <> Current
cd domain
# mv stories.md .stories.md.prev
rm stories.md
ln -s $PROJECT/stories/ stories.md
cd - > /dev/null
# cd models
# mv current .current.prev
# ln -s $PROJECT current
# cd - > /dev/null
echo "$PROJECT is now the current model"
DOMAIN=$PROJECT

# Tell them what we're doing.
case $CHOICE in
        [1]* ) echo "Ready to train model: '" $PROJECT "' for Intent Extraction";;
        [2]* ) echo "Ready to train model: '" $PROJECT "' for Response Logic";;
        [3]* ) echo "Ready to train model: '" $PROJECT "' for both Intent and Response Logic";;
esac

yn=y
while true; do
    break
    read -p "Continue?" yn
    case $yn in
        [Yy]* ) break;;
        [Nn]* ) exit;;
        * ) echo "Please answer y or n.";;
    esac
done

# @TODO: create model directory if it doesn't exist

if [[ $RUNYN = 'y' || $RUNYN = 'd' ]]; then
  mkdir -p -- "logs" # (safety check)
  REACTION="domain.$PROJECT.$ACTION"
  echo "about to start response server"
  nohup ./config/response_server.sh &
  #nohup python -m rasa_core_sdk.endpoint --actions $REACTION & echo $!
  echo "response server started with pid:"
  BILL=$!
  echo $BILL
  echo $BILL > config/bill.pid
fi

## "Let's git down to bizniz." -overheard in the office.

# NB. switch arguments should use '-' not '_' (enable_api, I'm looking at you.)
function train_nlu (){
  time python -m rasa_nlu.train -c config.yml --data domain/$DOMAIN/intents -o models --fixed_model_name nlu --project $PROJECT --verbose ;
}
function train_dialog (){
  time python -m rasa_core.train -d domain.yml -s domain/$DOMAIN/stories/ -o models/$PROJECT/dialogue -c policies.yml;
}
function run_bot (){
  python -m rasa_core.run -d models/$PROJECT/dialogue -u models/$PROJECT/nlu --endpoints $ENDPOINT --log_file $LOGFILE
}
function run_api (){
  nohup python -m rasa_core.run --enable_api -d models/$PROJECT/dialogue -u models/$PROJECT/nlu --endpoints $ENDPOINT --log_file $LOGFILE &
}
function run_debug (){
  python -m rasa_core.run -d models/$PROJECT/dialogue -u models/$PROJECT/nlu --endpoints $ENDPOINT --log_file $LOGFILE --debug

}
function run_api_debug (){
  python -m rasa_core.run --enable_api -d models/$PROJECT/dialogue -u models/$PROJECT/nlu --endpoints $ENDPOINT --log_file $LOGFILE --debug
}

# The Whole Enchilada
if [[ ! -z "$CHOICE" ]] && [[ $RUNYN = 'y' ]] && [[ $API = 'y' ]]; then
  case "$CHOICE" in
     1)
      train_nlu
      ;;
     2)
      train_dialog
      ;;
     3)
      train_nlu
      train_dialog
      ;;
  esac
  echo "Running model in API mode.";
  run_api
  exit 0
  #BUDD=$!
  #echo $BUDD > config/budd.pid
fi

# Run in API mode (don't retrain)
if [[ -z "${CHOICE}" ]] && [[ $RUNYN = 'y' ]] && [[ $API = 'y' ]]; then
  echo "Running in API mode";
  # This is redundant and can be safely removed.
  nohup python -m rasa_core.run \
    -u models/$DOMAIN/nlu \
    -d models/$DOMAIN/dialogue \
    --enable_api \
    --endpoints $ENDPOINT \
    --log_file $LOGFILE &
  exit 0
fi

# Don't retrain, just run (no API)
if [[ -z "${CHOICE}" ]] && [[ $RUNYN = 'y' ]]; then
  echo "No training, running model";
  # check training data exists
  # python -m rasa_nlu.train -c nlu_config.yml --data data/$PROJECT/intents/nlu_data.md -o models --fixed_model_name nlu --project $PROJECT --verbose ;
  # python -m rasa_nlu.train -c config.yml --data data//$PROJECT/intents -o models --fixed_model_name nlu --project $PROJECT --verbose --path agent ;
  #time python -m rasa_nlu.train -c config.yml --data data//$PROJECT/intents -o models --fixed_model_name nlu --project $PROJECT --verbose ;
  python -m rasa_core.run \
    -u models/$DOMAIN/nlu \
    -d models/$DOMAIN/dialogue \
    --endpoints $ENDPOINT \
    --log_file $LOGFILE
  echo "Exit?"
  read confirm
  exit 0
fi

# Just run in debug mode.
if [[ -z "${CHOICE}" ]] && [[ $RUNYN = 'd' ]]; then
  echo "Running model in debug mode";
  # check training data exists
  # python -m rasa_nlu.train -c nlu_config.yml --data data/$PROJECT/intents/nlu_data.md -o models --fixed_model_name nlu --project $PROJECT --verbose ;
  # python -m rasa_nlu.train -c config.yml --data data//$PROJECT/intents -o models --fixed_model_name nlu --project $PROJECT --verbose --path agent ;
  #time python -m rasa_nlu.train -c config.yml --data data//$PROJECT/intents -o models --fixed_model_name nlu --project $PROJECT --verbose ;
  # python -m rasa_core_sdk.endpoint --actions $ACTION & echo $!
  python -m rasa_core.run -d models/$PROJECT/dialogue -u models/$PROJECT/nlu --endpoints $ENDPOINT --log_file $LOGFILE --debug
  exit 0

fi

# # Following is not just switch case, but communicating switch case to end user in native grammar.

# train nlu only
if [[ $CHOICE == 1 && $RUNYN = 'n' ]]; then
  echo "Training $I for the domain:";
  echo $PROJECT | tr '[:lower:]' '[:upper:]'
  # check training data exists
  time python -m rasa_nlu.train -c config.yml --data domain/$DOMAIN/intents -o models --fixed_model_name nlu --project $PROJECT --verbose ;
fi

# train nlu and run
if [[ $CHOICE == 1 && $RUNYN = 'y' ]]; then
  echo "Training $I, then running app for the domain:";
  echo $PROJECT | tr '[:lower:]' '[:upper:]'
  # check training data exists
  time python -m rasa_nlu.train -c config.yml --data domain/$DOMAIN/intents -o models --fixed_model_name nlu --project $PROJECT --verbose ;
  python -m rasa_core.run -d models/$PROJECT/dialogue -u models/$PROJECT/nlu --endpoints $ENDPOINT --log_file $LOGFILE
fi

# train nlu and run in debug mode
if [[ $CHOICE == 1 && $RUNYN = 'd' ]]; then
  echo "Training $I, then debugging app for the domain:";
  echo $PROJECT | tr '[:lower:]' '[:upper:]'
  # check training data exists
  time python -m rasa_nlu.train -c config.yml --data domain/$DOMAIN/intents -o models --fixed_model_name nlu --project $PROJECT --verbose ;
  python -m rasa_core.run -d models/$PROJECT/dialogue -u models/$PROJECT/nlu --endpoints $ENDPOINT --log_file $LOGFILE --debug
fi

# train dialogue only
if [[ $CHOICE == 2 && $RUNYN = 'n' ]]; then
  echo "Ttraining $R for the domain.";
  echo $PROJECT | tr '[:lower:]' '[:upper:]'
  train_dialog
  # directory check, make directory if needed
  #time python -m rasa_core.train -d domain.yml -s domain/$DOMAIN/stories/ -o models/$PROJECT/dialogue -c policies.yml;
fi

# train dialogue and run
if [[ $CHOICE == 2 && $RUNYN == 'y' ]]; then
  echo "Training $R, then running app for the domain:";
  echo $PROJECT | tr '[:lower:]' '[:upper:]'
  time python -m rasa_core.train -d domain.yml -s domain/$DOMAIN/stories/ -o models/$PROJECT/dialogue -c policies.yml;
  python -m rasa_core.run -d models/$PROJECT/dialogue -u models/$PROJECT/nlu --endpoints $ENDPOINT --log_file $LOGFILE
fi

# train dialogue and run in debug mode
if [[ $CHOICE == 2 && $RUNYN == 'd' ]]; then
  echo "Training $R, then debugging app for the domain:";
  echo $PROJECT | tr '[:lower:]' '[:upper:]'
  time python -m rasa_core.train -d domain.yml -s domain/$DOMAIN/stories/ -o models/$PROJECT/dialogue -c policies.yml;
  python -m rasa_core.run -d models/$PROJECT/dialogue -u models/$PROJECT/nlu --endpoints $ENDPOINT --log_file $LOGFILE --debug
fi

# train both nlu and dialogue
if [[ $CHOICE == 3 && $RUNYN == 'n' ]]; then
  # PROJECT=${PROJECT^^} # Don't assume bash 4+
  echo "Training $I and $R for the domain:";
  echo $PROJECT | tr '[:lower:]' '[:upper:]'
  time python -m rasa_nlu.train -c config.yml --data domain/$DOMAIN/intents -o models --fixed_model_name nlu --project $PROJECT --verbose ;
  time python -m rasa_core.train -d domain.yml -s domain/$DOMAIN/stories/ -o models/$DOMAIN/dialogue -c policies.yml;
fi

# train both and run
if [[ $CHOICE == 3 && $RUNYN == 'y' ]]; then
  echo "Training both $I and $R, then running app for the domain:";
  echo $PROJECT | tr '[:lower:]' '[:upper:]'
  time python -m rasa_nlu.train -c config.yml --data domain//$DOMAIN/intents -o models --fixed_model_name nlu --project $PROJECT --verbose ;
  time python -m rasa_core.train -d domain.yml -s domain/$DOMAIN/stories/ -o models/$PROJECT/dialogue -c policies.yml;
  python -m rasa_core.run -d models/$PROJECT/dialogue -u models/$PROJECT/nlu --endpoints $ENDPOINT --log_file $LOGFILE
fi

# train both and run in debug mode
if [[ $CHOICE == 3 && $RUNYN == 'd' ]]; then
  echo "Training both $I and $R, then debugging app for the domain:";
  echo $PROJECT | tr '[:lower:]' '[:upper:]'
  # directory check, make directory if needed
  time python -m rasa_nlu.train -c config.yml --data domain/$DOMAIN/intents -o models --fixed_model_name nlu --project $PROJECT --verbose ;
  time python -m rasa_core.train -d domain.yml -s domain/$DOMAIN/stories/ -o models/$PROJECT/dialogue -c policies.yml;
  python -m rasa_core.run -d models/$PROJECT/dialogue -u models/$PROJECT/nlu --endpoints $ENDPOINT --log_file $LOGFILE --debug
fi


# No Dragons Beyond This Point.
#kill $BILL
#kill $!
